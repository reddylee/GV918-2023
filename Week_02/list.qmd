## Create a list

```{python}
list1 = ["a", "b", "c", "d", "e"]
# index:  0    1    2    3    4       
# index:  -5  -4   -3   -2   -1       
list1 # ['a', 'b', 'c', 'd', 'e']
list1[0] # 'a'
list1[-3] # 'c'
```
## Change value 

```{python}
list1[0] = "A" #change the value "a" in the first index to "A"
list1 # ['A', 'b', 'c', 'd', 'e']

list1[3] = "B" #change the value "d" in the fourth index to "B"
list1 # ['A', 'b', 'c', 'B', 'e']
```
## Append

```{python}
list2 = ["a", "b", "c", "d", "e"]
list2 # ["a", "b", "c", "d", "e"]
list2.append(5) # Add number 5 to the last index of the list
list2 # ['a', 'b', 'c', 'd', 'e', 5]
```

## Remove

```{python}
list3 = ["a", "b", "c", "d", "e"]
list3 # ['a', 'b', 'c', 'd', 'e']
remove = list3.pop() # remove the last one
list3 # ['a', 'b', 'c', 'd']
remove # 'e'

remove2 = list3.pop(2) # remove the index 2 value: "c"
list3 # ['a', 'b', 'd']
remove2 # 'c'

print(remove, list3) # e ['a', 'b', 'd']

list4 = ["a", "b", "c", "d", "e", "b"]
list4.remove('a') # remove value "a"
list4 # ['b', 'c', 'd', 'e', 'b']

list4.remove('b')
list4  # ['c', 'd', 'e', 'b']: only removes the first 'b'.

list4.remove("x") # Error: "x" does not exist in list4
```
## Insert
```{python}
list5 = ["a", "b", "c", "d", "e"]
list5.insert(2, 100) # insert value 100 to the index 2
list5 # ['a', 'b', 100, 'c', 'd', 'e']

list5.extend([1,2,3]) # add 1,2 and 3 in the end of list5
list5 # ['a', 'b', 100, 'c', 'd', 'e', 1, 2, 3]
```
## tuple: immutable

```{python}
tuple1 = (1,2,3)
tuple1[2] # 3
tuple1[1] = 100 # TypeError: 'tuple' object does not support item assignment
```
## Notice

```{python}
list6 = ["a", "b", "c", "d", "e"]
list7 = list6
list7
list7[2] = "Reddy"
print(list6, list7) # We get two identical list even though we only changed lsit7, but list6 changed as well.
```
```{python}
list6 = ["a", "b", "c", "d", "e"]
list7 = list6[:] # This is copy and the change in list 7 does not change list6
list7[1] = "B"
print(list6,list7)
```

## Nested list

```{python}
list8 = [
  [1,2],
  [3,[4]]
]

list8 # [[1, 2], [3, [4]]]

list8[1] # [3, [4]]
list8[1][1] # [4]
list8[1][1][0] # 4
```
```{python}
def func(lst=[1,2]):
  lst.append(100) # add default value 100
  return lst

lst1=func()
lst2=func()
lst3=func()
```

## slicing

```{python}
lst = [1,2,3,4,5,6,7,8]
lst
print(lst[:])
print(lst[1:])
print(lst[:7])
print(lst[1:6])
print(lst[1:6:])
print(lst[1:6:2])
print(lst[-1])
print(lst[:-1])
print(lst[::-1])
print(lst[-1:])
```
```{python}
lst[2:4] = [1000]
lst
lst[2:4] = [1000,1000]
lst
```
## useful list methods

```{python}
lst = [1,2,3,4,5,6,7,8,3]

contains = 2 in lst

lst
index = lst.index(2)
print(contains,index)
```
```{python}
print(lst.count(3))

lst.sort()
lst
lst.sort(reverse = True)
lst
lst = [1,2,3,4,5,6,7,8,3]
lst.reverse()
lst
sorted(lst)
lst
reversed(lst) # ?
list(reversed(lst)) # ?
```
## zipping lists

```{python}
names = ["Tim","Joe","Sally"]
ages = [23, 45, 34]
zipped = zip(names, ages)
list(zipped)
```
## List comprehension

```{python}
lst = [ x for x in range(10)]

lst
```
```{python}
9 % 2 

lst = [ x for x in range(10) if x % 2 == 0]

lst
```
```{python}
9 % 2 

lst = [ [ x for x in range(10) if x % 2 == 0] for _ in range(5)]

lst
```
```{python}
list[range(7)]
list(range(7))
```

